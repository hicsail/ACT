// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { AppControllerGetHelloData, CasdoorControllerHandleRedirectData, CasdoorControllerHandleSigninData, TasksControllerFindAllData, TasksControllerFindAllResponse, TasksControllerCreateData, TasksControllerCreateResponse, TasksControllerRemoveData, TasksControllerFindOneData, TasksControllerFindOneResponse, TasksControllerUpdateData, TasksControllerUpdateResponse, TasksControllerGetActiveTasksData, TasksControllerGetActiveTasksResponse, TaskSetControllerFindAllData, TaskSetControllerFindAllResponse, TaskSetControllerCreateData, TaskSetControllerCreateResponse, TaskSetControllerRemoveData, TaskSetControllerFindOneData, TaskSetControllerFindOneResponse, TaskSetControllerUpdateData, TaskSetControllerUpdateResponse, TaskSetControllerSetActiveData, TaskSetControllerSetActiveResponse, TaskCompletionsControllerFindAllData, TaskCompletionsControllerFindAllResponse, TaskCompletionsControllerCreateData, TaskCompletionsControllerCreateResponse, TaskCompletionsControllerRemoveData, TaskCompletionsControllerFindOneData, TaskCompletionsControllerFindOneResponse, TaskCompletionsControllerUpdateData, TaskCompletionsControllerUpdateResponse, TaskCompletionsControllerFindOrCreateByUserTaskData, TaskCompletionsControllerFindOrCreateByUserTaskResponse, TaskCompletionsControllerFindOrCreateByTaskData, TaskCompletionsControllerFindOrCreateByTaskResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const appControllerGetHello = <ThrowOnError extends boolean = false>(options?: Options<AppControllerGetHelloData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

export const casdoorControllerHandleRedirect = <ThrowOnError extends boolean = false>(options?: Options<CasdoorControllerHandleRedirectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/casdoor/redirect',
        ...options
    });
};

export const casdoorControllerHandleSignin = <ThrowOnError extends boolean = false>(options: Options<CasdoorControllerHandleSigninData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/casdoor/signin',
        ...options
    });
};

export const tasksControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<TasksControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TasksControllerFindAllResponse, unknown, ThrowOnError>({
        url: '/tasks',
        ...options
    });
};

export const tasksControllerCreate = <ThrowOnError extends boolean = false>(options: Options<TasksControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TasksControllerCreateResponse, unknown, ThrowOnError>({
        url: '/tasks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const tasksControllerRemove = <ThrowOnError extends boolean = false>(options: Options<TasksControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/tasks/{id}',
        ...options
    });
};

export const tasksControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<TasksControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TasksControllerFindOneResponse, unknown, ThrowOnError>({
        url: '/tasks/{id}',
        ...options
    });
};

export const tasksControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<TasksControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<TasksControllerUpdateResponse, unknown, ThrowOnError>({
        url: '/tasks/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const tasksControllerGetActiveTasks = <ThrowOnError extends boolean = false>(options?: Options<TasksControllerGetActiveTasksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TasksControllerGetActiveTasksResponse, unknown, ThrowOnError>({
        url: '/tasks/active/tasks',
        ...options
    });
};

export const taskSetControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<TaskSetControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TaskSetControllerFindAllResponse, unknown, ThrowOnError>({
        url: '/sets',
        ...options
    });
};

export const taskSetControllerCreate = <ThrowOnError extends boolean = false>(options: Options<TaskSetControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TaskSetControllerCreateResponse, unknown, ThrowOnError>({
        url: '/sets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const taskSetControllerRemove = <ThrowOnError extends boolean = false>(options: Options<TaskSetControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/sets/{id}',
        ...options
    });
};

export const taskSetControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<TaskSetControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TaskSetControllerFindOneResponse, unknown, ThrowOnError>({
        url: '/sets/{id}',
        ...options
    });
};

export const taskSetControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<TaskSetControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<TaskSetControllerUpdateResponse, unknown, ThrowOnError>({
        url: '/sets/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const taskSetControllerSetActive = <ThrowOnError extends boolean = false>(options: Options<TaskSetControllerSetActiveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<TaskSetControllerSetActiveResponse, unknown, ThrowOnError>({
        url: '/sets/active/{id}',
        ...options
    });
};

export const taskCompletionsControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<TaskCompletionsControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TaskCompletionsControllerFindAllResponse, unknown, ThrowOnError>({
        url: '/taskCompletions',
        ...options
    });
};

export const taskCompletionsControllerCreate = <ThrowOnError extends boolean = false>(options: Options<TaskCompletionsControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TaskCompletionsControllerCreateResponse, unknown, ThrowOnError>({
        url: '/taskCompletions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const taskCompletionsControllerRemove = <ThrowOnError extends boolean = false>(options: Options<TaskCompletionsControllerRemoveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/taskCompletions/{id}',
        ...options
    });
};

export const taskCompletionsControllerFindOne = <ThrowOnError extends boolean = false>(options: Options<TaskCompletionsControllerFindOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TaskCompletionsControllerFindOneResponse, unknown, ThrowOnError>({
        url: '/taskCompletions/{id}',
        ...options
    });
};

export const taskCompletionsControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<TaskCompletionsControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<TaskCompletionsControllerUpdateResponse, unknown, ThrowOnError>({
        url: '/taskCompletions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a task completion by providing the user and task
 */
export const taskCompletionsControllerFindOrCreateByUserTask = <ThrowOnError extends boolean = false>(options: Options<TaskCompletionsControllerFindOrCreateByUserTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TaskCompletionsControllerFindOrCreateByUserTaskResponse, unknown, ThrowOnError>({
        url: '/taskCompletions/by-user/query',
        ...options
    });
};

/**
 * Get a task completion by inferring the user from the JWT and the task from the query
 */
export const taskCompletionsControllerFindOrCreateByTask = <ThrowOnError extends boolean = false>(options: Options<TaskCompletionsControllerFindOrCreateByTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TaskCompletionsControllerFindOrCreateByTaskResponse, unknown, ThrowOnError>({
        url: '/taskCompletions/by-user/header',
        ...options
    });
};