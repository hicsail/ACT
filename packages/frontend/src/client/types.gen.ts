// This file is auto-generated by @hey-api/openapi-ts

export type CreateTaskDto = {
    /**
     * Category the task falls under
     */
    category: string;
    /**
     * The set the task should belong to
     */
    taskSetId: string;
    /**
     * Title of the task
     */
    title: string;
    /**
     * Preview text describing the task
     */
    preview: string;
    /**
     * Preview image shown along with task
     */
    previewImage: string;
    /**
     * Duration of the task in seconds
     */
    timeSeconds: number;
    /**
     * Task description given to the user
     */
    description: string;
    /**
     * Problem overview for the user
     */
    problemDescription: string;
    /**
     * Additional details for the user to follow
     */
    taskDetails: string;
    /**
     * Prompts for the user to meet
     */
    prompts: Array<string>;
};

export type TaskEntity = {
    /**
     * Unique ID of the task
     */
    id: string;
    /**
     * The ID of the set the task belongs to
     */
    taskSetId: string;
    /**
     * Category the task falls under
     */
    category: string;
    /**
     * Title of the task
     */
    title: string;
    /**
     * Preview text describing the task
     */
    preview: string;
    /**
     * Preview image shown along with the task
     */
    previewImage: string;
    /**
     * Duration of the task in seconds
     */
    timeSeconds: number;
    /**
     * Task description given to the user
     */
    description: string;
    /**
     * Problem overview for the user
     */
    problemDescription: string;
    /**
     * Additional details for the user to follow
     */
    taskDetails: string;
    /**
     * Prompts for the user to meet
     */
    prompts: {
        [key: string]: unknown;
    };
};

export type UpdateTaskDto = {
    [key: string]: unknown;
};

export type CreateTaskSetDto = {
    /**
     * Name of the task set
     */
    name: string;
    /**
     * Description of the task set
     */
    description: string;
};

export type TaskSetEntity = {
    /**
     * Unique ID of the set
     */
    id: string;
    /**
     * If this is the current set being used
     */
    active: boolean;
    /**
     * The name of the set
     */
    name: string;
    /**
     * The description of the set
     */
    description: string;
};

export type UpdateTaskSetDto = {
    /**
     * Name of the task set
     */
    name?: string;
    /**
     * Description of the task set
     */
    description?: string;
};

export type CreateTaskCompletionDto = {
    /**
     * The ID of the task associated with the completion
     */
    taskId: string;
    /**
     * If the completion has been finished
     */
    complete: boolean;
    /**
     * The location of the video
     */
    video: string;
    /**
     * The ID of the user who made the completion
     */
    user: string;
};

export type TaskCompletionEntity = {
    /**
     * Unique ID fo the completion
     */
    id: string;
    /**
     * The ID of the task associated with the completion
     */
    taskId: string;
    /**
     * If the completion has been finished
     */
    complete: boolean;
    /**
     * The location of the video
     */
    video: string;
    /**
     * The ID of the user who made the completion
     */
    user: string;
};

export type UpdateTaskCompletionDto = {
    /**
     * The ID of the task associated with the completion
     */
    taskId?: string;
    /**
     * If the completion has been finished
     */
    complete?: boolean;
    /**
     * The location of the video
     */
    video?: string;
    /**
     * The ID of the user who made the completion
     */
    user?: string;
};

export type AppControllerGetHelloData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type AppControllerGetHelloResponses = {
    200: unknown;
};

export type CasdoorControllerHandleRedirectData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/casdoor/redirect';
};

export type CasdoorControllerHandleRedirectResponses = {
    200: unknown;
};

export type CasdoorControllerHandleSigninData = {
    body?: never;
    path?: never;
    query: {
        code: string;
    };
    url: '/casdoor/signin';
};

export type CasdoorControllerHandleSigninResponses = {
    201: unknown;
};

export type TasksControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/tasks';
};

export type TasksControllerFindAllResponses = {
    default: Array<TaskEntity>;
};

export type TasksControllerFindAllResponse = TasksControllerFindAllResponses[keyof TasksControllerFindAllResponses];

export type TasksControllerCreateData = {
    body: CreateTaskDto;
    path?: never;
    query?: never;
    url: '/tasks';
};

export type TasksControllerCreateResponses = {
    default: TaskEntity;
};

export type TasksControllerCreateResponse = TasksControllerCreateResponses[keyof TasksControllerCreateResponses];

export type TasksControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/tasks/{id}';
};

export type TasksControllerRemoveResponses = {
    200: unknown;
};

export type TasksControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/tasks/{id}';
};

export type TasksControllerFindOneResponses = {
    default: TaskEntity;
};

export type TasksControllerFindOneResponse = TasksControllerFindOneResponses[keyof TasksControllerFindOneResponses];

export type TasksControllerUpdateData = {
    body: UpdateTaskDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/tasks/{id}';
};

export type TasksControllerUpdateResponses = {
    default: TaskEntity;
};

export type TasksControllerUpdateResponse = TasksControllerUpdateResponses[keyof TasksControllerUpdateResponses];

export type TasksControllerGetActiveTasksData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/tasks/active/tasks';
};

export type TasksControllerGetActiveTasksResponses = {
    default: Array<TaskEntity>;
};

export type TasksControllerGetActiveTasksResponse = TasksControllerGetActiveTasksResponses[keyof TasksControllerGetActiveTasksResponses];

export type TaskSetControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sets';
};

export type TaskSetControllerFindAllResponses = {
    default: Array<TaskSetEntity>;
};

export type TaskSetControllerFindAllResponse = TaskSetControllerFindAllResponses[keyof TaskSetControllerFindAllResponses];

export type TaskSetControllerCreateData = {
    body: CreateTaskSetDto;
    path?: never;
    query?: never;
    url: '/sets';
};

export type TaskSetControllerCreateResponses = {
    default: TaskSetEntity;
};

export type TaskSetControllerCreateResponse = TaskSetControllerCreateResponses[keyof TaskSetControllerCreateResponses];

export type TaskSetControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/sets/{id}';
};

export type TaskSetControllerRemoveResponses = {
    200: unknown;
};

export type TaskSetControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/sets/{id}';
};

export type TaskSetControllerFindOneResponses = {
    default: TaskSetEntity;
};

export type TaskSetControllerFindOneResponse = TaskSetControllerFindOneResponses[keyof TaskSetControllerFindOneResponses];

export type TaskSetControllerUpdateData = {
    body: UpdateTaskSetDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/sets/{id}';
};

export type TaskSetControllerUpdateResponses = {
    default: TaskSetEntity;
};

export type TaskSetControllerUpdateResponse = TaskSetControllerUpdateResponses[keyof TaskSetControllerUpdateResponses];

export type TaskSetControllerSetActiveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/sets/active/{id}';
};

export type TaskSetControllerSetActiveResponses = {
    default: TaskSetEntity;
};

export type TaskSetControllerSetActiveResponse = TaskSetControllerSetActiveResponses[keyof TaskSetControllerSetActiveResponses];

export type TaskCompletionsControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/taskCompletions';
};

export type TaskCompletionsControllerFindAllResponses = {
    default: Array<TaskCompletionEntity>;
};

export type TaskCompletionsControllerFindAllResponse = TaskCompletionsControllerFindAllResponses[keyof TaskCompletionsControllerFindAllResponses];

export type TaskCompletionsControllerCreateData = {
    body: CreateTaskCompletionDto;
    path?: never;
    query?: never;
    url: '/taskCompletions';
};

export type TaskCompletionsControllerCreateResponses = {
    default: TaskCompletionEntity;
};

export type TaskCompletionsControllerCreateResponse = TaskCompletionsControllerCreateResponses[keyof TaskCompletionsControllerCreateResponses];

export type TaskCompletionsControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/taskCompletions/{id}';
};

export type TaskCompletionsControllerRemoveResponses = {
    200: unknown;
};

export type TaskCompletionsControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/taskCompletions/{id}';
};

export type TaskCompletionsControllerFindOneResponses = {
    default: TaskCompletionEntity;
};

export type TaskCompletionsControllerFindOneResponse = TaskCompletionsControllerFindOneResponses[keyof TaskCompletionsControllerFindOneResponses];

export type TaskCompletionsControllerUpdateData = {
    body: UpdateTaskCompletionDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/taskCompletions/{id}';
};

export type TaskCompletionsControllerUpdateResponses = {
    default: TaskCompletionEntity;
};

export type TaskCompletionsControllerUpdateResponse = TaskCompletionsControllerUpdateResponses[keyof TaskCompletionsControllerUpdateResponses];

export type TaskCompletionsControllerFindOrCreateByUserTaskData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The user to search by
         */
        user: string;
        /**
         * The task to search by
         */
        task: string;
    };
    url: '/taskCompletions/by-user/query';
};

export type TaskCompletionsControllerFindOrCreateByUserTaskResponses = {
    default: TaskCompletionEntity;
};

export type TaskCompletionsControllerFindOrCreateByUserTaskResponse = TaskCompletionsControllerFindOrCreateByUserTaskResponses[keyof TaskCompletionsControllerFindOrCreateByUserTaskResponses];

export type TaskCompletionsControllerFindOrCreateByTaskData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The task to search by
         */
        task: string;
    };
    url: '/taskCompletions/by-user/header';
};

export type TaskCompletionsControllerFindOrCreateByTaskResponses = {
    default: TaskCompletionEntity;
};

export type TaskCompletionsControllerFindOrCreateByTaskResponse = TaskCompletionsControllerFindOrCreateByTaskResponses[keyof TaskCompletionsControllerFindOrCreateByTaskResponses];

export type TaskCompletionsControllerGetVideoUploadUrlData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/taskCompletions/upload-url/{id}';
};

export type TaskCompletionsControllerGetVideoUploadUrlResponses = {
    default: string;
};

export type TaskCompletionsControllerGetVideoUploadUrlResponse = TaskCompletionsControllerGetVideoUploadUrlResponses[keyof TaskCompletionsControllerGetVideoUploadUrlResponses];

export type ClientOptions = {
    baseUrl: string;
};